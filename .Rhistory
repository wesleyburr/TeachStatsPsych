pm1 * (dat$grp1 - dat$grp2)
pm1
dat$grp1 - dat$grp2
observed
dat <- Diving2017$Final - Diving2017$Semifinal
observed <- mean(dat)
dat <- Diving2017$Final - Diving2017$Semifinal
library("resampledata")
data(Diving2017)
Diving2017[1:3, ]
dat <- Diving2017$Final - Diving2017$Semifinal
observed <- mean(dat)
observed
dat <- Diving2017$Final - Diving2017$Semifinal
observed <- mean(dat)
observed
B <- 1e5 - 1
results <- vector(length = B)
for(j in 1:B) {
results <- mean( sample(x = c(-1, 1), size = 12, replace = TRUE) * dat )
}
2 * ( (sum( results >= observed ) + 1) / (B+1) )
dat
hist(results)
results
knitr::opts_chunk$set(echo = TRUE)
library("resampledata")
data("NCBirths2004")
force(NCBirths2004)
View(NCBirths2004)
head(NCBirths2004)
table(Weight ~ Smoker, data = NCBirths2004)
table(Weight, Smoker, data = NCBirths2004)
table(NCBirths2004$Weight, NCBirths2004$Smoker)
?table
head(NCBirths2004)
table(NCBirths2004$Smoker)
tapply(X = NCBirths2004$Weight, INDEX = NCBirths2004$Smoker, FUN = mean)
xbars <- tapply(X = NCBirths2004$Weight, INDEX = NCBirths2004$Smoker, FUN = sd)
xbars <- tapply(X = NCBirths2004$Weight, INDEX = NCBirths2004$Smoker, FUN = mean)
sds <- tapply(X = NCBirths2004$Weight, INDEX = NCBirths2004$Smoker, FUN = sd)
xbars; sds;
?t.test
t.test(Weight ~ Smoker, data = NCBirths2004, alternative = "greater",
mu = 0)
ns <- tapply(X = NCBirths2004$Weight, INDEX = NCBirths2004$Smoker, FUN = length)
nu <- (sds[1]^2/ns[1] + sds[2]^2/ns[2])^2 / ( (sds[1]^2/ns[1])^2/(ns[1]-1) + (sds[2]^2/ns[2])^2/(ns[2]-1) )
nu
t_test <- (xbars[1] - xbars[2]) / sqrt( sds[1]^2/ns[1] + sds[2]^2/ns[2] )
pt(q = t_test, df = nu, lower.tail = FALSE)
Smoker
t.test(Weight ~ Smoker, data = NCBirths2004, alternative = "greater",
mu = 0)
round(p, 2)
p <- pt(q = t_test, df = nu, lower.tail = FALSE)  # upper tailed
round(p, 2)
?round
round(p, 6)
round(p, 7)
t_test
knitr::opts_chunk$set(echo = TRUE)
library("resampledata")
data("Batters2005")
force(Batters2005)
names(Batters2005)
?Batters2005
library("dobson")
install.packages("dobson")
library("dobson")
data(cholesterol)
force(cholesterol)
observed <- 870/1500 - 645/1500
B <- 10^5 - 1
pool <- c(rep(1, 645 + 870), rep(0, 1500 * 2 - 645 - 870))
results <- vector(length = B)
m <- 1500; n <- 1500;
for(j in 1:B) {
permute <- sample(x = pool, size = 3000, replace = FALSE)
results[j] <- sum(pool[1:1500]) / m - sum(pool[1501:3000]) / n
}
how_many <- sum(results >= observed)
empirical_p <- (how_many + 1) / (B + 1)
how_many
results[1:10]
observed <- 870/1500 - 645/1500
B <- 10^5 - 1
pool <- c(rep(1, 645 + 870), rep(0, 1500 * 2 - 645 - 870))
results <- vector(length = B)
m <- 1500; n <- 1500;
for(j in 1:B) {
permute <- sample(x = pool, size = 3000, replace = FALSE)
results[j] <- sum(permute[1:1500]) / m - sum(permute[1501:3000]) / n
}
how_many <- sum(results >= observed)
how_many
empirical_p <- (how_many + 1) / (B + 1)
empirical_p
observed
results[1:20]
empirical_p <- 2 * ((how_many + 1) / (B + 1))
empirical_p
library("resampledata")
data(Batters2005)
force(Batters2005)
View(Batters2005)
names(Batters2005)
dat <- data.frame(League = Batters2005$League, Runs = Batters2005$Runs)
View(Batters2005)
unique(dat$League)
View(Batters2005)
Batters2005[82, ]
Batters2005 <- Batters2005[-82, ]
dat <- data.frame(League = Batters2005$League, Runs = Batters2005$Runs)
national <- dat[dat$League == "National", "Runs"]
american <- dat[dat$League == "American", "Runs"]
observed <- mean(national) - mean(american)
dat <- data.frame(League = Batters2005$League, Runs = Batters2005$Runs)
national <- dat[dat$League == "National", "Runs"]
m <- length(national)
american <- dat[dat$League == "American", "Runs"]
n <- length(american)
observed <- mean(national) - mean(american)
pool <- c(national, american)
B <- 10^4 - 1
results <- vector(length = B)
for(j in 1:B) {
index <- sample(1:(n+m), m, replace = FALSE)
results[j] <- mean(pool[index]) - mean(pool[-index])
}
empirical_p <- (sum(results >= observed) + 1) / (B + 1)
empirical_p
B <- 10^4 - 1
diff <- after - before
before <-c(200.1, 190.9, 192.7, 213, 241.4,
196.9, 172.2, 185.5, 205.2, 193.7)
after <-c(392.9, 393.2, 345.1, 393, 434,
427.9, 422, 383.9, 392.3, 352.2)
B <- 10^4 - 1
diff <- after - before
n <- length(diff)
observed <- mean(diff)
results <- vector(length = B)
for(j in 1:B) {
pm1 <- sample(x = c(-1, 1), size = n, replace = TRUE)
results[j] <- mean( pm1 * diff )
}
empirical_p <- (sum(results >= observed) + 1) / (B + 1)
empirical_p
knitr::opts_chunk$set(echo = TRUE)
# install.packages("resampledata")
library("resampledata")
# install.packages("resampledata")
library("resampledata")
data(Verizon)
force(Verizon)
Time <- Verizon$Time   # All Times
Time <- Verizon$Time   # All Times
Time.ILEC <- subset(Verizon, select = Time,    # ILEC Times
subset = Group == "ILEC", drop = T)
Time.CLEC <- subset(Verizon, select = Time,    # CLEC Times
subset = Group == "CLEC", drop = T)
hist(Time.ILEC)
hist(Time.CLEC)
Time <- Verizon$Time   # All Times
Time.ILEC <- subset(Verizon, select = Time,    # ILEC Times
subset = Group == "ILEC", drop = T)
Time.CLEC <- subset(Verizon, select = Time,    # CLEC Times
subset = Group == "CLEC", drop = T)
hist(Time.ILEC, breaks = 30)
hist(Time.CLEC, breaks = 30)
tapply(Verizon$Time, Verizon$Group, mean)
observed <- mean(Time.ILEC) - mean(Time.CLEC)
observed
B <- 10^4 - 1
n <- length(Time)
result <- numeric(B)
for (i in 1:B) {
# sample the "permuted CLEC" observations, 1664 of the 1687 total
index <- sample(1:n, size = 1664, replace = FALSE)
# the negative index, Time[-index], deletes the index observations
result[i] <- mean(Time[index]) - mean(Time[-index])
}
hist(result, xlab = expression(bar(X)[1] - bar(X)[2]),
main = "Permutation distribution for Verizon times")
abline(v = observed, lty = 2, col = "blue")
p_val <- (sum(result <= observed) + 1)/(B + 1)
p_val
library("wPerm")
data("energy")
str(energy)
summary( aov( lm(ENERGY ~ REGION, data = energy) ) )
mod <- perm.oneway.anova(x = energy$ENERGY, y = energy$REGION,
R = 1e4)
print(mod)
str(mod)
mod$P.value
mod <- perm.ind.loc(x = Verizon$Time,
y = Verizon$Group,
parameter = mean,
stacked = TRUE,
alternative = "greater",
R = 1e4)
print(mod)
mod$P.value
set.seed(91)
dat <- round(rnorm(n = 30, mean = 2, sd = 2), 2)
summary(dat)
B <- 1e4
boots <- vector(length = B)
for(j in 1:B) {
boots[j] <- mean(sample(x = dat, size = length(dat), replace = TRUE))
}
sd(boots)
library("boot")
set.seed(91)
dat <- round(rnorm(n = 30, mean = 2, sd = 2), 2)
summary(dat)
B <- 1e4
boots <- vector(length = B)
for(j in 1:B) {
boots[j] <- mean(sample(x = dat, size = length(dat), replace = TRUE))
}
sd(boots)
B <- 1e4
boots <- vector(length = B)
for(j in 1:B) {
boots[j] <- median(sample(x = dat, size = length(dat), replace = TRUE))
}
sd(boots)
library("boot")
boots <- boot(data = dat, statistic = mean, R = 100, trim = 0)
?boot
boots <- boot(data = dat, statistic = mean, R = 100)
my_mean <- function(x) {
mean(x, trim = 0, na.rm = TRUE)
}
boots <- boot(data = dat, statistic = my_mean, R = 100)
my_mean <- function(x, indexes) {
mean(x[indexes], trim = 0, na.rm = TRUE)
}
boots <- boot(data = dat, statistic = my_mean, R = 100)
str(boots)
mean(dat)
boots <- boot(data = dat, statistic = my_mean, R = 1e4)
str(boots)
sd(boots$t)
source('~/.active-rstudio-document', echo=TRUE)
perm.oneway.anova(x = dat$Grade,
y = dat$Section,
trim = 0,
R = 1e4)
library("wPerm")
set.seed(91)
n <- c(0, 33, 19, 10, 29, 33, 10, 32, 31)
dat <- data.frame(Grade = rep(0, sum(n)),
Section = rep(0, sum(n)))
means <- c(0, 92.94, 91.11, 91.8, 92.45, 89.3, 88.3, 90.12, 93.35)
sds <- c(0, 4.21, 5.58, 3.43, 5.92, 9.32, 7.27, 6.93, 4.57) / 1.5
idx <- 1
for(j in 2:9) {
dat[idx:(idx+n[j]-1), 1] <- rnorm(n = n[j], mean = means[j], sd = sds[j])
dat[idx:(idx+n[j]-1), 2] <- rep(j-1, n[j])
idx <- idx + n[j]
}
dat[, 1] <- round(dat[, 1], 1)
dat[, 2] <- as.factor(dat[, 2])
names(dat) <- c("Grade", "Section")
dat[dat$Grade > 100, 1] <- 100
head(dat)
mod <- aov(lm(Grade ~ Section, data = dat))
summary(mod)
observed_F <- summary(mod)[[1]]$`F value`[1]
perm.oneway.anova(x = dat$Grade,
y = dat$Section,
trim = 0,
R = 1e4)
mod$P.value
mod <- perm.oneway.anova(x = dat$Grade,
y = dat$Section,
trim = 0,
R = 1e4)
mod$P.value
N <- 1000; current_y <- sample(800:N, 1); current_no <- N - current_y; comp_y <- sample(900:N, 1); comp_n <- N - comp_y;
c(current_y, current_no, comp_y, comp_n);
library("wPerm")
?perm.ind.loc
dat <- data.frame(QCPass = c(rep(1, 987), rep(0, 13), rep(1, 929), rep(0, 71)), Company = factor(c(rep(1, 1000), rep(2, 1000))))
perm.ind.loc(dat, mean, "greater", R = 1e4)
perm.ind.loc(x = dat, parameter = mean, alternative = "greater", R = 1e4)
perm.ind.loc(x = dat$QCPass, y = dat$Company, parameter = mean, alternative = "greater", R = 1e4)
perm.ind.loc(x = dat$QCPass, y = dat$Company, parameter = mean, alternative = "less", R = 1e4)
mod <- perm.ind.loc(x = dat$QCPass, y = dat$Company, parameter = mean, alternative = "less", R = 1e4)
str(mod)
mod$Observed
mod$p.value
library("wPerm")
set.seed(27)
dat <- data.frame(QCPass = c(rep(1, 987), rep(0, 13), rep(1, 929), rep(0, 71)), Company = factor(c(rep(1, 1000), rep(2, 1000))))
# Note lesser: population 1 in the data.frame is "current", and we want # competitor > current mod <- perm.ind.loc(x = dat, y = dat, parameter = mean, alternative = "less", R = 1e4)
mod
mod.value
library("wPerm")
set.seed(27)
dat <- data.frame(QCPass = c(rep(1, 987), rep(0, 13), rep(1, 929), rep(0, 71)), Company = factor(c(rep(1, 1000), rep(2, 1000))))
# Note lesser: population 1 in the data.frame is "current", and we want
# competitor > current
mod <- perm.ind.loc(x = dat, y = dat, parameter = mean, alternative = "less", R = 1e4)
mod[["Observed"]]
mod[["p.value"]]
N1 <- sample(800, 1200, 1); N2 <- sample(700, 1100, 1);
dem_y <- sample((N1-500):(N1-300), 1); dem_no <- N1 - dem_y; gop_y <- sample((N2-700):(N2-400), 1); gop_no <- N2 - gop_y;
?sample
library("wPerm")
set.seed(119)
dat <- data.frame(Support = c(rep(1, 659), rep(0, 366), rep(1, 385), rep(0, 563)), Party = factor(c(rep("DEM", 659+366), rep("GOP", 385+563))))
mod <- perm.ind.loc(x = dat, y = dat, parameter = mean, alternative = "two.sided", R = 5e4)
mod[["Observed"]]
mod[["p.value"]]
mod[["Observed"]]
mod[["p.value"]]
dat <- data.frame(Support = c(rep(1, 659), rep(0, 366), rep(1, 385), rep(0, 563)), Party = factor(c(rep("DEM", 659+366), rep("GOP", 385+563))))
mod <- perm.ind.loc(x = dat, y = dat, parameter = mean, alternative = "two.sided", R = 5e4)
set.seed(119)
dat <- data.frame(Support = c(rep(1, 659), rep(0, 366), rep(1, 385), rep(0, 563)), Party = factor(c(rep("DEM", 659+366), rep("GOP", 385+563))))
mod <- perm.ind.loc(x = dat$Support, y = dat$Party, parameter = mean, alternative = "two.sided", R = 5e4)
mod[["Observed"]]
mod[["p.value"]]
# Solution
dat <- read.csv("~/Downloads/file66082283547b.csv", header = TRUE)
str(dat)
set.seed(65)
mod <- perm.ind.loc(x = dat[["Scores2009"]], y = dat[["Scores2004"]], parameter = mean, stacked = FALSE, alternative = "greater", R = 1e4)
mod[["Observed"]]
mod[["p.value"]]
mod <- perm.ind.loc(x = dat[["Scores2009"]], y = dat[["Scores2004"]],
parameter = mean, stacked = FALSE, alternative = "greater", R = 1e4)
str(dat[["Scores2009"]])
str(dat[["Scores2004"]])
mod <- perm.ind.loc(x = dat$Scores2009, y = dat$Scores2004,
parameter = mean, stacked = FALSE, alternative = "greater", R = 1e4)
mod[["Observed"]]
mod[["p.value"]]
set.seed(65)
mod <- perm.ind.loc(x = dat$Scores2009, y = dat$Scores2004,
parameter = mean, stacked = FALSE, alternative = "greater", R = 1e4)
mod[["Observed"]]
mod[["p.value"]]
dat <- read.csv("~/Downloads/file664e73070458.csv", header = TRUE)
set.seed(105)
mod <- perm.ind.loc(x = dat$Paleo, y = dat$Control,
parameter = mean, stacked = FALSE, alternative = "less", R = 1e4)
mod[["Observed"]]
mod[["p.value"]]
temp1968 <- round(sample(68:104, size = 51, replace = TRUE) + rnorm(n = 51, mean = 0, sd = 1), 2)
temp2008 <- round(temp1968 + rnorm(n = 51, mean = 2, sd = 2), 2)
temp1968
temp2008
temp1968 <- round(sample(68:104, size = 51, replace = TRUE) + rnorm(n = 51, mean = 0, sd = 1), 1)
temp2008 <- round(temp1968 + rnorm(n = 51, mean = 2, sd = 2), 1)
temp1968
temp2008
dat <- read.csv("~/Downloads/file66f4a62ef7b.csv", header = TRUE)
set.seed(89)
read.csv(file = "temporary_file.csv", header = TRUE)
mod <- perm.paired.loc(x = dat[["Temp2008"]], y = dat[["Temp1968"]], parameter = mean, alternative = "greater", R = 2e4)
mod <- perm.paired.loc(x = dat$Temp2008$, y = dat$Temp1968, parameter = mean, alternative = "greater", R = 2e4)
mod <- perm.paired.loc(x = dat$Temp2008, y = dat$Temp1968, parameter = mean, alternative = "greater", R = 2e4)
mod[["Observed"]]
mod[["p.value"]]
perm.oneway.anova()
?perm.oneway.anova
dat <- read.csv("~/Downloads/file6773167da8dd.csv", header = TRUE)
library("wPerm")
set.seed(148)
mod <- perm.oneway.anova(x = dat$Weight, y = dat$Feed, trim = 0,  R = 1e4)
mod[["Observed"]]
mod[["p.value"]]
library(learnr)
knitr::opts_chunk$set(echo = FALSE)
party <- c( rep("R", 200), rep("D", 200) ) # Since we want R - D
Response <- c( rep(1, 46), rep(0, 200-46),
rep(1, 34), rep(0, 200-34))
dat <- data.frame(Response = Response, party = as.factor(party))
mod <- perm.ind.loc(x = dat$Response,
y = dat$party,
parameter = mean,
stacked = TRUE,
alternative = "greater",
R = 1e4)
library(wPerm)
party <- c( rep("R", 200), rep("D", 200) ) # Since we want R - D
Response <- c( rep(1, 46), rep(0, 200-46),
rep(1, 34), rep(0, 200-34))
dat <- data.frame(Response = Response, party = as.factor(party))
mod <- perm.ind.loc(x = dat$Response,
y = dat$party,
parameter = mean,
stacked = TRUE,
alternative = "greater",
R = 1e4)
mod$p.value
print(mod)
46/200-34/200
?perm.ind.loc
str(dat)
party <- c( rep("R", 200), rep("D", 200) ) # Since we want R - D
Response <- c( rep(1, 46), rep(0, 200-46),
rep(1, 34), rep(0, 200-34))
dat <- data.frame(Response = Response, party = as.factor(party, levels = "R", "D"))
mod <- perm.ind.loc(x = dat$Response,
y = dat$party,
parameter = mean,
stacked = TRUE,
alternative = "greater",
R = 1e4)
mod$p.value
mod$Observed
party <- c( rep("R", 200), rep("D", 200) ) # Since we want R - D
Response <- c( rep(1, 46), rep(0, 200-46),
rep(1, 34), rep(0, 200-34))
dat <- data.frame(Response = Response, party = as.factor(party, levels = "R", "D"))
mod <- perm.ind.loc(x = dat$Response,
y = dat$party,
parameter = mean,
stacked = TRUE,
alternative = "less",
R = 1e4)
mod$Observed
mod$p.value
party <- c( rep("D", 200), rep("R", 200) ) # 2nd minus 1st in Stacked
Response <- c( rep(1, 34), rep(0, 200-34),
rep(1, 46), rep(0, 200-46))
dat <- data.frame(Response = Response, party = as.factor(party, levels = "R", "D"))
mod <- perm.ind.loc(x = dat$Response,
y = dat$party,
parameter = mean,
stacked = TRUE,
alternative = "less",
R = 1e4)
mod$p.value
mod$Observed
party <- c( rep("D", 200), rep("R", 200) ) # 2nd minus 1st in Stacked
Response <- c( rep(1, 34), rep(0, 200-34),
rep(1, 46), rep(0, 200-46))
dat <- data.frame(Response = Response, party = factor(party, levels = "R", "D"))
mod <- perm.ind.loc(x = dat$Response,
y = dat$party,
parameter = mean,
stacked = TRUE,
alternative = "less",
R = 1e4)
mod$Observed
mod
party <- c( rep("D", 200), rep("R", 200) ) # 2nd minus 1st in Stacked
Response <- c( rep(1, 34), rep(0, 200-34),
rep(1, 46), rep(0, 200-46))
dat <- data.frame(Response = Response, Party = factor(party, levels = "R", "D"))
mod <- perm.ind.loc(x = dat$Response,
y = dat$Party,
parameter = mean,
stacked = TRUE,
alternative = "less",
R = 1e4)
dat
str(dat)
party <- c( rep("D", 200), rep("R", 200) ) # 2nd minus 1st in Stacked
Response <- c( rep(1, 34), rep(0, 200-34),
rep(1, 46), rep(0, 200-46))
dat <- data.frame(Response = Response, Party = factor(party, levels = c("R", "D")))
mod <- perm.ind.loc(x = dat$Response,
y = dat$Party,
parameter = mean,
stacked = TRUE,
alternative = "less",
R = 1e4)
mod$Observed
mod$p.value
party <- c( rep("D", 200), rep("R", 200) ) # set factor with 1st, then 2nd
Response <- c( rep(1, 34), rep(0, 200-34),
rep(1, 46), rep(0, 200-46))
dat <- data.frame(Response = Response, Party = factor(party, levels = c("R", "D")))
mod <- perm.ind.loc(x = dat$Response,
y = dat$Party,  # key is factor() above
parameter = mean,
stacked = TRUE,
alternative = "greater",
R = 1e4)
print(mod)
mod$p.value
mod$p.value
mod$p.value
mean(before-after)
before <- c(6.6, 6.5, 9.0, 10.3, 11.3, 8.1, 6.3, 11.6)
after <- c(6.8, 2.4, 7.4, 8.5, 8.1, 6.1, 3.4, 2.0)
mod <- perm.ind.loc(x = after, y = before,
parameter = mean,
stacked = FALSE, alternative = "less",
R = 1e4)
mean(after-before)
mod
party <- c( rep("D", 200), rep("R", 200) ) # set factor with 1st, then 2nd
Response <- c( rep(1, 34), rep(0, 200-34),
rep(1, 46), rep(0, 200-46))
dat <- data.frame(Response = Response, Party = factor(party, levels = c("R", "D")))
mod <- perm.ind.loc(x = dat$Response,
y = dat$Party,  # key is factor() above
parameter = mean,
stacked = TRUE,
alternative = "greater",
R = 1e4)
mod
setwd("~/doc/Talks/21_Trent_Seminar")
